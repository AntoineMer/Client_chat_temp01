using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Net.Mail;

namespace Client_chat.Dao
{
    class User
    {
            #region STATIC 
            private const string SALT = "!^$£%";

            public static string Password_Hash(string _value)
            {
                StringBuilder sb = new StringBuilder();

                SHA512 _hash = System.Security.Cryptography.SHA512Managed.Create();

                byte[] inputTmp = _hash.ComputeHash(Encoding.UTF8.GetBytes(SALT + _value + SALT));

                foreach (byte b in inputTmp)
                {
                    sb.Append(b.ToString("x2"));
                }

                return sb.ToString();
            }
        
            #endregion

            #region PROPERTIES

            /// <summary>
            /// User Login Name.
            /// </summary>
            private string login;

            /// <summary>
            /// User Gender. Must be 'M' OR 'F'.
            /// </summary>
            private char gender;

            /// <summary>
            /// User Email. Must be a valid email.
            /// </summary>
            private string email;

            /// <summary>
            /// User Birthday. user must be 18 years old.
            /// </summary>
            private DateTime birthday;

            /// <summary>
            /// User register date. Generated by server while registering new user.
            /// </summary>
            private DateTime registered;

            /// <summary>
            /// User password
            /// </summary>
            private string passwd;

            /// <summary>
            /// User Group ID
            /// </summary>
            private int group_id;

            /// <summary>
            /// Security token
            /// </summary>
            private string security_token;

            private Group user_group;

            public string Passwd
            {
                get { return passwd; }
                set
                {
                    if (
                        (value.Length >= 8) &&
                        (Regex.IsMatch(value, @"[0-9]")) &&
                        (Regex.IsMatch(value, @"[a-z]")) &&
                        //(Regex.IsMatch(value, @"[^a-zA-Z0-9]") &&
                        (Regex.IsMatch(value, @"[A-Z]"))
                    //(Regex.IsMatch(value, @"^.*(?=.{7,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$")) // (?=.*[^a-zA-Z0-9])
                    )
                    {
                        passwd = Password_Hash(value);
                    }




                }
            }

            public DateTime Birthday
            {
                get { return birthday; }
                set
                {
                    int age = DateTime.Now.Year - value.Year;

                    if (
                        (DateTime.Now.Month < value.Month) ||
                        ((DateTime.Now.Month == value.Month) && (DateTime.Now.Day < value.Day))
                    )
                    {
                        age--;
                    }

                    if (age >= 18)
                    {
                        birthday = value;
                    }
                }
            }

            public DateTime Registered
            {
                get
                {
                    return registered;
                }

                set
                {
                    registered = value;
                }
            }

            public char Gender
            {
                get
                {
                    return gender;
                }

                set
                {
                    value = Char.ToUpper(value);
                    gender = (value == 'M' || value == 'F') ? value : 'M';
                    //if (value == 'M' || value == 'F')
                    //{
                    //    gender = value;
                    //}
                    //else
                    //{
                    //    gender = 'M';
                    //}
                }
            }

            public string Email
            {
                get
                {
                    return email;
                }

                set
                {
                    try
                    {
                        MailAddress temp = new MailAddress(value);
                        email = temp.Address;
                    }
                    catch
                    {
                        email = null;
                    }

                }
            }

            public string Login
            {
                get
                {
                    return login;
                }

                set
                {
                    value = value.Replace(@"\s", "_");

                    if (value.Length >= 3 &&
                        value.Length <= 16 &&
                        Regex.IsMatch(value, @"[a-zA-Z0-9_]"))
                    {
                        login = value;
                    }
                    else
                    {
                        login = null;
                    }
                }
            }

            public int Group_id
            {
                get
                {
                    return group_id;
                }

                set
                {
                    group_id = value;
                }
            }

            public string Security_token
            {
                get
                {
                    return Password_Hash(login + passwd + email + birthday + registered + group_id);
                }
            }



            #endregion


            #region INITIALIZATION

            public User()
            {

            }

            #endregion


            #region AUTH

            public bool Auth(string _input)
            {
                _input = Password_Hash(_input);

                return (_input == passwd);
            }

            #endregion

        public bool IsValide()
        {
            if ((login != null)
                && (birthday != null)
                && (passwd != null)
                )
                return true;
            else
                return false;
        }


        }
    }
